name: E2E Quality Gates

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to run tests against'
        required: true
        default: 'development'
        type: choice
        options:
        - development
        - staging
        - production

jobs:
  e2e-quality-gates:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [20.x]
        python-version: [3.11]

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_vlanet_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    env:
      CI: true
      NODE_ENV: test
      NEXT_TELEMETRY_DISABLED: 1
      # Backend settings
      DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_vlanet_db
      SECRET_KEY: test-secret-key-for-ci-only
      DEBUG: true
      ALLOWED_HOSTS: localhost,127.0.0.1
      # Frontend settings
      NEXT_PUBLIC_API_BASE_URL: http://127.0.0.1:8001
      # Test settings
      CYPRESS_baseUrl: http://localhost:3005/test
      CYPRESS_API_BASE_URL: http://127.0.0.1:8001
      CYPRESS_VIDEO: false
      CYPRESS_SCREENSHOT_ON_FAILURE: true
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'pnpm'

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8
          
      - name: Install frontend dependencies
        run: |
          cd vridge-web
          pnpm install --frozen-lockfile

      - name: Install backend dependencies
        run: |
          cd vridge_back
          pip install -r requirements.txt

      - name: Setup backend database
        run: |
          cd vridge_back
          python manage.py migrate --settings=config.settings_test
          python manage.py collectstatic --noinput --settings=config.settings_test

      - name: Start backend server
        run: |
          cd vridge_back
          python manage.py runserver 8001 --settings=config.settings_test &
          echo $! > backend.pid
          # Wait for backend to be ready
          timeout 60 bash -c 'until curl -f http://127.0.0.1:8001/api/v1/projects/; do sleep 1; done'

      - name: Build frontend
        run: |
          cd vridge-web
          pnpm run build

      - name: Start frontend server  
        run: |
          cd vridge-web
          pnpm run start &
          echo $! > frontend.pid
          # Wait for frontend to be ready
          timeout 60 bash -c 'until curl -f http://localhost:3005; do sleep 1; done'

      - name: Install Cypress binary
        run: |
          cd vridge-web
          npx cypress install

      - name: Run E2E Quality Gates
        run: |
          cd vridge-web
          node scripts/e2e-quality-gate.js
        continue-on-error: true
        id: quality-gates

      - name: Upload test artifacts
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: e2e-test-artifacts
          path: |
            vridge-web/cypress/videos/
            vridge-web/cypress/screenshots/
            vridge-web/reports/
          retention-days: 7

      - name: Upload quality gate report
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: quality-gate-report
          path: vridge-web/reports/E2E_TEST_EXECUTION_REPORT.md
          retention-days: 30

      - name: Comment PR with results
        if: github.event_name == 'pull_request' && always()
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            try {
              const reportPath = path.join('vridge-web', 'reports', 'E2E_TEST_EXECUTION_REPORT.md');
              if (fs.existsSync(reportPath)) {
                const report = fs.readFileSync(reportPath, 'utf8');
                
                const { context } = github;
                const issue_number = context.payload.pull_request.number;
                
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue_number,
                  body: `## üß™ E2E Quality Gates Report\n\n${report}\n\n---\n*Automated by GitHub Actions*`
                });
              }
            } catch (error) {
              console.log('Could not post PR comment:', error.message);
            }

      - name: Fail job if quality gates failed
        if: steps.quality-gates.outcome == 'failure'
        run: |
          echo "‚ùå E2E Quality Gates failed. Check the report for details."
          exit 1

      - name: Success notification
        if: steps.quality-gates.outcome == 'success'
        run: |
          echo "‚úÖ All E2E Quality Gates passed successfully!"

      - name: Cleanup
        if: always()
        run: |
          # Kill servers if still running
          if [ -f vridge-web/frontend.pid ]; then
            kill $(cat vridge-web/frontend.pid) || true
          fi
          if [ -f vridge_back/backend.pid ]; then  
            kill $(cat vridge_back/backend.pid) || true
          fi