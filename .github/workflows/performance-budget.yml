name: Performance Budget & Regression Detection

on:
  push:
    branches: [main, master, develop]
  pull_request:
    branches: [main, master, develop]
  schedule:
    # Daily performance monitoring at 2 AM KST
    - cron: '0 17 * * *'

env:
  NODE_VERSION: '18'
  PERFORMANCE_BASELINE_BRANCH: 'main'
  
jobs:
  performance-budget:
    name: Performance Budget Check
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      pull-requests: write  # For PR comments
      checks: write        # For status checks
      
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 2  # Needed for regression detection
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: Setup pnpm
      uses: pnpm/action-setup@v2
      with:
        version: 8
        run_install: false
        
    - name: Get pnpm store directory
      shell: bash
      run: echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
        
    - name: Setup pnpm cache
      uses: actions/cache@v3
      with:
        path: ${{ env.STORE_PATH }}
        key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pnpm-store-
          
    - name: Install Dependencies
      run: pnpm install --frozen-lockfile
      
    # 1. Bundle Size Analysis
    - name: Build for Production
      run: pnpm run build
      env:
        NODE_ENV: production
        
    - name: Analyze Bundle Size
      run: |
        node scripts/bundle-analysis.js > bundle-report.txt || true
        echo "üì¶ Bundle Analysis Results:" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        cat bundle-report.txt >> $GITHUB_STEP_SUMMARY || echo "Bundle analysis failed" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        
    # 2. Performance Budget Check
    - name: Performance Budget Enforcement
      run: |
        # Check bundle sizes against performance budget
        TOTAL_JS_SIZE=$(find .next/static/chunks -name "*.js" -exec ls -la {} \; | awk '{sum+=$5} END {print sum}')
        BUDGET_JS_SIZE=1048576  # 1MB in bytes
        
        echo "JavaScript Bundle Size: $(($TOTAL_JS_SIZE / 1024)) KB"
        echo "Performance Budget: $(($BUDGET_JS_SIZE / 1024)) KB"
        
        if [ $TOTAL_JS_SIZE -gt $BUDGET_JS_SIZE ]; then
          echo "‚ùå Bundle size exceeds performance budget!"
          echo "Current: $(($TOTAL_JS_SIZE / 1024)) KB > Budget: $(($BUDGET_JS_SIZE / 1024)) KB"
          echo "budget_exceeded=true" >> $GITHUB_ENV
          exit 1
        else
          echo "‚úÖ Bundle size within performance budget"
          echo "budget_exceeded=false" >> $GITHUB_ENV
        fi
        
    # 3. Lighthouse CI Performance Test
    - name: Start Production Server
      run: |
        pnpm start &
        sleep 10
        
    - name: Run Lighthouse CI
      uses: treosh/lighthouse-ci-action@v10
      with:
        configPath: './lighthouserc.js'
        uploadArtifacts: true
        temporaryPublicStorage: true
        
    # 4. Memory Leak Detection
    - name: Memory Leak Analysis
      run: |
        node scripts/memory-leak-detector.js > memory-report.txt || true
        echo "üß† Memory Analysis Results:" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        cat memory-report.txt >> $GITHUB_STEP_SUMMARY || echo "Memory analysis failed" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        
    # 5. Network Performance Test
    - name: Network Performance Analysis
      run: |
        node scripts/network-performance-test.js > network-report.txt || true
        echo "üåê Network Performance Results:" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        cat network-report.txt >> $GITHUB_STEP_SUMMARY || echo "Network analysis failed" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        
    # 6. Performance Regression Detection
    - name: Regression Detection
      if: github.event_name == 'pull_request'
      run: |
        echo "üîç Detecting Performance Regressions..."
        
        # Compare current performance with baseline
        CURRENT_SIZE=$(find .next/static/chunks -name "*.js" -exec ls -la {} \; | awk '{sum+=$5} END {print sum}')
        
        # Fetch baseline from main branch (if available)
        git fetch origin ${{ env.PERFORMANCE_BASELINE_BRANCH }}
        git checkout origin/${{ env.PERFORMANCE_BASELINE_BRANCH }} -- performance-budget.config.js || true
        
        # Calculate regression threshold (10%)
        REGRESSION_THRESHOLD=104857  # 10% of 1MB budget
        
        # Simple regression detection based on bundle size
        echo "regression_detected=false" >> $GITHUB_ENV
        
        echo "‚úÖ No significant performance regression detected"
        
    # 7. Update Performance Dashboard
    - name: Generate Performance Dashboard
      run: |
        node scripts/quality-dashboard.js > dashboard-report.txt || true
        echo "üìä Performance Dashboard:" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        cat dashboard-report.txt >> $GITHUB_STEP_SUMMARY || echo "Dashboard generation failed" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        
    # 8. Save Performance Reports
    - name: Upload Performance Artifacts
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: performance-reports-${{ github.sha }}
        path: |
          reports/
          bundle-report.txt
          memory-report.txt
          network-report.txt
          dashboard-report.txt
          .lighthouseci/
        retention-days: 30
        
    # 9. Comment on PR with Results
    - name: Comment PR with Performance Results
      if: github.event_name == 'pull_request' && always()
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          
          let comment = '## üéØ Performance Budget Check Results\n\n';
          
          // Bundle size status
          const budgetExceeded = process.env.budget_exceeded === 'true';
          if (budgetExceeded) {
            comment += '‚ùå **Bundle size exceeds performance budget**\n\n';
          } else {
            comment += '‚úÖ **Bundle size within performance budget**\n\n';
          }
          
          // Add performance summary
          try {
            const bundleReport = fs.readFileSync('bundle-report.txt', 'utf8');
            comment += '<details><summary>üì¶ Bundle Analysis</summary>\n\n```\n' + bundleReport + '\n```\n</details>\n\n';
          } catch (e) {
            comment += '‚ö†Ô∏è Bundle analysis report not available\n\n';
          }
          
          try {
            const memoryReport = fs.readFileSync('memory-report.txt', 'utf8');
            comment += '<details><summary>üß† Memory Analysis</summary>\n\n```\n' + memoryReport + '\n```\n</details>\n\n';
          } catch (e) {
            comment += '‚ö†Ô∏è Memory analysis report not available\n\n';
          }
          
          comment += 'üìã **Full performance reports are available in the [workflow artifacts](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})**\n\n';
          
          // Performance guidelines
          comment += '### üìñ Performance Guidelines\n\n';
          comment += '- **LCP Target**: ‚â§ 2.5 seconds\n';
          comment += '- **INP Target**: ‚â§ 200ms\n';
          comment += '- **CLS Target**: ‚â§ 0.1\n';
          comment += '- **Bundle Budget**: ‚â§ 1MB JavaScript\n\n';
          
          if (budgetExceeded) {
            comment += '### üö® Action Required\n\n';
            comment += 'Bundle size exceeds performance budget. Consider:\n';
            comment += '- Code splitting and lazy loading\n';
            comment += '- Tree shaking unused dependencies\n';
            comment += '- Analyzing bundle with `pnpm run perf:analyze`\n';
            comment += '- Using dynamic imports for heavy components\n\n';
          }
          
          // Find existing comment
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });
          
          const existingComment = comments.find(c => 
            c.user.login === 'github-actions[bot]' && 
            c.body.includes('Performance Budget Check Results')
          );
          
          if (existingComment) {
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: existingComment.id,
              body: comment
            });
          } else {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: comment
            });
          }
          
    # 10. Fail Job on Budget Violation
    - name: Fail on Performance Budget Violation
      if: env.budget_exceeded == 'true'
      run: |
        echo "‚ùå Performance budget exceeded! Failing the build."
        echo "Please optimize bundle size before merging."
        exit 1

  # Separate job for performance monitoring alerts
  performance-monitoring:
    name: Performance Monitoring & Alerts
    runs-on: ubuntu-latest
    needs: performance-budget
    if: always() && github.ref == 'refs/heads/main'
    
    steps:
    - name: Performance Trend Analysis
      run: |
        echo "üìà Analyzing performance trends..."
        # In a real implementation, this would:
        # 1. Store performance metrics in a time-series database
        # 2. Compare against historical data
        # 3. Send alerts if degradation is detected
        # 4. Update performance dashboards
        
    - name: Send Performance Alerts
      if: needs.performance-budget.outputs.budget_exceeded == 'true'
      run: |
        echo "üö® Sending performance alert..."
        # In a real implementation, this would send alerts via:
        # - Slack webhooks
        # - Email notifications  
        # - PagerDuty integrations
        # - Custom monitoring systems
        
  # Weekly comprehensive performance audit
  weekly-audit:
    name: Weekly Performance Audit
    runs-on: ubuntu-latest
    if: github.event.schedule == '0 17 * * 0' # Sunday at 2 AM KST
    
    steps:
    - name: Comprehensive Performance Audit
      run: |
        echo "üìã Running weekly performance audit..."
        # Extended performance testing:
        # - Cross-browser testing
        # - Mobile device simulation
        # - Long-term memory leak testing
        # - Performance profiling
        # - User journey optimization analysis