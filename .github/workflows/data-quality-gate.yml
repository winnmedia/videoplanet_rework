# 데이터 품질 게이트 워크플로우
# CLAUDE.md Part 4.1 - 품질 게이트 & CI 준수
# Daniel's Data Lead Standards - 계약 기반 검증, 배포 차단

name: Data Quality Gate

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]
    paths:
      - 'src/**'
      - 'scripts/**'
      - 'package.json'
      - '.github/workflows/data-quality-gate.yml'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to run quality gate'
        required: true
        default: 'staging'
        type: choice
        options:
          - development
          - staging
          - production
      dry_run:
        description: 'Run without making changes'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '18'
  PNPM_VERSION: '8.x'

jobs:
  data-quality-gate:
    name: Data Quality Validation
    runs-on: ubuntu-latest
    
    # 환경별 설정
    environment: ${{ github.event.inputs.environment || (github.ref == 'refs/heads/main' && 'production' || 'staging') }}
    
    outputs:
      quality-score: ${{ steps.quality-gate.outputs.quality-score }}
      gate-status: ${{ steps.quality-gate.outputs.gate-status }}
      
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 전체 히스토리 필요 (품질 트렌드 분석용)

      - name: 📦 Setup PNPM
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          cache-dependency-path: 'vridge-web/pnpm-lock.yaml'

      - name: 📥 Install dependencies
        working-directory: vridge-web
        run: pnpm install --frozen-lockfile

      - name: 🏗️ Build TypeScript
        working-directory: vridge-web
        run: |
          pnpm build:types
          pnpm tsc --noEmit

      - name: 🧪 Run unit tests for data integrity
        working-directory: vridge-web
        run: |
          pnpm test src/shared/lib/data-integrity-checker.test.ts --coverage
          pnpm test src/shared/lib/data-quality-pipeline.test.ts --coverage

      - name: 🔍 Execute Data Quality Gate
        id: quality-gate
        working-directory: vridge-web
        env:
          NODE_ENV: ${{ github.event.inputs.environment || (github.ref == 'refs/heads/main' && 'production' || 'staging') }}
          DRY_RUN: ${{ github.event.inputs.dry_run || 'false' }}
        run: |
          # 품질 게이트 실행
          if [ "$DRY_RUN" = "true" ]; then
            echo "🔍 Running data quality gate (DRY RUN mode)"
            node scripts/data-quality-gate.js --env=$NODE_ENV --dry-run --verbose
          else
            echo "🔍 Running data quality gate"
            node scripts/data-quality-gate.js --env=$NODE_ENV --verbose
          fi
          
          # 결과 파싱 및 출력 설정
          quality_score=$(grep -o 'Quality Score: [0-9.]*%' quality-gate.log | grep -o '[0-9.]*' || echo "0")
          gate_status=$(grep -o 'Quality Gate [A-Z]*' quality-gate.log | awk '{print $3}' || echo "UNKNOWN")
          
          echo "quality-score=$quality_score" >> $GITHUB_OUTPUT
          echo "gate-status=$gate_status" >> $GITHUB_OUTPUT
          
          # GitHub 환경으로 결과 내보내기
          echo "QUALITY_SCORE=$quality_score" >> $GITHUB_ENV
          echo "GATE_STATUS=$gate_status" >> $GITHUB_ENV

      - name: 📊 Generate Quality Report
        if: always()
        working-directory: vridge-web
        run: |
          # 품질 보고서 생성
          mkdir -p reports
          
          # 기본 메트릭 수집
          echo "{
            \"timestamp\": \"$(date -u +%Y-%m-%dT%H:%M:%SZ)\",
            \"workflow_run_id\": \"${{ github.run_id }}\",
            \"commit_sha\": \"${{ github.sha }}\",
            \"branch\": \"${{ github.ref_name }}\",
            \"environment\": \"${{ env.NODE_ENV }}\",
            \"quality_score\": ${{ env.QUALITY_SCORE || 0 }},
            \"gate_status\": \"${{ env.GATE_STATUS }}\",
            \"dry_run\": ${{ github.event.inputs.dry_run || false }}
          }" > reports/quality-summary.json
          
          # 상세 보고서 생성 (실제로는 data-quality-gate.js에서 생성)
          if [ -f "reports/data-quality-*.json" ]; then
            echo "📊 Quality report files found"
            ls -la reports/
          fi

      - name: 📤 Upload Quality Report
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: data-quality-report-${{ env.NODE_ENV }}-${{ github.run_id }}
          path: |
            vridge-web/reports/
          retention-days: 30

      - name: 💬 Comment PR with Quality Results
        if: github.event_name == 'pull_request' && always()
        uses: actions/github-script@v7
        with:
          script: |
            const qualityScore = '${{ env.QUALITY_SCORE }}' || '0';
            const gateStatus = '${{ env.GATE_STATUS }}' || 'UNKNOWN';
            const isDryRun = ${{ github.event.inputs.dry_run || false }};
            
            const statusEmoji = gateStatus === 'PASSED' ? '✅' : '❌';
            const scoreEmoji = parseFloat(qualityScore) >= 90 ? '🟢' : parseFloat(qualityScore) >= 70 ? '🟡' : '🔴';
            
            const body = `## ${statusEmoji} Data Quality Gate Results
            
            ${isDryRun ? '🧪 **DRY RUN MODE**' : ''}
            
            | Metric | Value | Status |
            |--------|-------|---------|
            | Quality Score | ${scoreEmoji} ${qualityScore}% | ${gateStatus} |
            | Environment | ${{ env.NODE_ENV }} | |
            | Commit | \`${{ github.sha }}\` | |
            
            ### 📊 Details
            - **Workflow Run**: [${{ github.run_id }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
            - **Quality Report**: Available in workflow artifacts
            
            ${gateStatus !== 'PASSED' ? '⚠️ **Quality gate failed - please review the issues before merging**' : '🎉 **All quality checks passed**'}
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });

      - name: ⚠️ Quality Gate Status Check
        if: always()
        run: |
          if [ "${{ env.GATE_STATUS }}" = "PASSED" ]; then
            echo "✅ Data quality gate passed successfully"
            exit 0
          elif [ "${{ env.GATE_STATUS }}" = "FAILED" ] && [ "${{ env.NODE_ENV }}" = "production" ]; then
            echo "❌ Data quality gate failed in production environment"
            echo "🚫 Blocking deployment due to quality gate failure"
            exit 1
          elif [ "${{ env.GATE_STATUS }}" = "FAILED" ]; then
            echo "⚠️ Data quality gate failed but not blocking in ${{ env.NODE_ENV }} environment"
            exit 0
          else
            echo "❓ Unknown quality gate status: ${{ env.GATE_STATUS }}"
            exit 1
          fi

  # 품질 트렌드 분석 (선택적)
  quality-trend-analysis:
    name: Quality Trend Analysis
    runs-on: ubuntu-latest
    needs: [data-quality-gate]
    if: github.ref == 'refs/heads/main' && always()
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 50  # 최근 50개 커밋 히스토리

      - name: 📊 Download Quality Report
        uses: actions/download-artifact@v3
        with:
          name: data-quality-report-${{ needs.data-quality-gate.outputs.environment || 'staging' }}-${{ github.run_id }}
          path: ./reports/

      - name: 📈 Analyze Quality Trends
        run: |
          echo "📈 Quality Trend Analysis"
          echo "Current Quality Score: ${{ needs.data-quality-gate.outputs.quality-score }}%"
          echo "Current Gate Status: ${{ needs.data-quality-gate.outputs.gate-status }}"
          
          # 실제로는 과거 품질 데이터와 비교하여 트렌드 분석
          # 예: 품질 점수 하락 시 알림, 개선 추천 등
          
          current_score=${{ needs.data-quality-gate.outputs.quality-score }}
          if [ "$current_score" -lt "80" ]; then
            echo "⚠️ Quality score is below 80% - consider immediate improvement actions"
          fi

      - name: 🔔 Notify Quality Degradation
        if: needs.data-quality-gate.outputs.quality-score < 80
        run: |
          echo "🚨 Quality degradation detected!"
          echo "Recommended actions:"
          echo "  1. Review data integrity issues"
          echo "  2. Check rating-role mapping consistency"  
          echo "  3. Clean up orphaned records"
          echo "  4. Update data validation rules"

  # Slack 알림 (선택적)
  notify-slack:
    name: Notify Slack
    runs-on: ubuntu-latest
    needs: [data-quality-gate]
    if: always() && (github.ref == 'refs/heads/main' || needs.data-quality-gate.outputs.gate-status == 'FAILED')
    
    steps:
      - name: 🔔 Send Slack notification
        # uses: 8398a7/action-slack@v3
        # with:
        #   status: ${{ needs.data-quality-gate.outputs.gate-status }}
        #   channel: '#data-quality'
        #   webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        run: |
          echo "🔔 Would send Slack notification:"
          echo "Status: ${{ needs.data-quality-gate.outputs.gate-status }}"
          echo "Quality Score: ${{ needs.data-quality-gate.outputs.quality-score }}%"
          echo "Environment: ${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}"