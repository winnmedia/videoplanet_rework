name: CI/CD Pipeline - Quality Gates & Deployment

on:
  push:
    branches: [ main, master, develop, feature/* ]
  pull_request:
    branches: [ main, master, develop ]

jobs:
  # Frontend ÌÖåÏä§Ìä∏ Î∞è ÎπåÎìú
  frontend-tests:
    name: Frontend Tests & Build (Next.js + Vitest)
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: vridge-web/package-lock.json
    
    - name: Install dependencies
      working-directory: ./vridge-web
      run: npm ci
    
    - name: Run linter
      working-directory: ./vridge-web
      run: npm run lint
    
    - name: Run type check
      working-directory: ./vridge-web
      run: npm run type-check
    
    - name: Run unit tests with coverage
      working-directory: ./vridge-web
      run: npm run test:coverage
    
    - name: Check coverage thresholds
      working-directory: ./vridge_front
      run: |
        coverage=$(cat coverage/coverage-summary.json | jq '.total.lines.pct')
        echo "Coverage: $coverage%"
        if (( $(echo "$coverage < 70" | bc -l) )); then
          echo "Coverage is below 70%"
          exit 1
        fi
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        directory: ./vridge_front/coverage
        flags: frontend
        name: frontend-coverage
    
    - name: Run mutation tests (PR only)
      if: github.event_name == 'pull_request'
      working-directory: ./vridge_front
      run: npm run test:mutation
      continue-on-error: true
    
    - name: Archive test results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: frontend-test-results
        path: |
          vridge_front/coverage
          vridge_front/test-results
          vridge_front/.stryker-tmp

  # Backend ÌÖåÏä§Ìä∏
  backend-tests:
    name: Backend Tests (Django + Pytest)
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: test_vridge
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install dependencies
      working-directory: ./vridge_back
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-test.txt
    
    - name: Run linter (flake8)
      working-directory: ./vridge_back
      run: flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
    
    - name: Run security check (bandit)
      working-directory: ./vridge_back
      run: bandit -r . -f json -o bandit-report.json
      continue-on-error: true
    
    - name: Run tests with coverage
      working-directory: ./vridge_back
      env:
        DATABASE_URL: postgres://testuser:testpass@localhost:5432/test_vridge
        REDIS_URL: redis://localhost:6379
      run: |
        pytest --cov=. --cov-report=xml --cov-report=term-missing \
               --junit-xml=test-results.xml \
               -v --tb=short
    
    - name: Check coverage threshold
      working-directory: ./vridge_back
      run: |
        coverage report --fail-under=70
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        directory: ./vridge_back
        flags: backend
        name: backend-coverage
    
    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: backend-test-results
        path: |
          vridge_back/htmlcov
          vridge_back/test-results.xml
          vridge_back/bandit-report.json

  # E2E ÌÖåÏä§Ìä∏
  e2e-tests:
    name: E2E Tests (Playwright)
    runs-on: ubuntu-latest
    needs: [frontend-tests, backend-tests]
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
    
    - name: Install dependencies
      working-directory: ./vridge_front
      run: |
        npm ci
        npx playwright install --with-deps
    
    - name: Start backend server
      working-directory: ./vridge_back
      run: |
        python manage.py migrate
        python manage.py runserver &
      env:
        DATABASE_URL: postgres://testuser:testpass@localhost:5432/test_vridge
    
    - name: Start frontend server
      working-directory: ./vridge_front
      run: |
        npm run build
        npm run start &
      env:
        NEXT_PUBLIC_API_URL: http://localhost:8000
    
    - name: Wait for servers
      run: |
        npx wait-on http://localhost:3000 http://localhost:8000/health -t 60000
    
    - name: Run E2E tests
      working-directory: ./vridge_front
      run: npm run test:e2e
    
    - name: Upload E2E test results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: e2e-results
        path: |
          vridge_front/playwright-report
          vridge_front/test-results

  # ÌíàÏßà Í≤åÏù¥Ìä∏ ÏµúÏ¢Ö ÌôïÏù∏
  quality-gate:
    name: Quality Gate Check
    runs-on: ubuntu-latest
    needs: [frontend-tests, backend-tests, e2e-tests]
    if: always()
    
    steps:
    - name: Check job results
      run: |
        if [[ "${{ needs.frontend-tests.result }}" != "success" || \
              "${{ needs.backend-tests.result }}" != "success" || \
              "${{ needs.e2e-tests.result }}" != "success" ]]; then
          echo "One or more tests failed"
          exit 1
        fi
        echo "All tests passed!"
    
    - name: Comment PR with results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const message = `## üéØ Quality Gate Results
          
          | Check | Status |
          |-------|--------|
          | Frontend Tests | ${{ needs.frontend-tests.result == 'success' && '‚úÖ' || '‚ùå' }} |
          | Backend Tests | ${{ needs.backend-tests.result == 'success' && '‚úÖ' || '‚ùå' }} |
          | E2E Tests | ${{ needs.e2e-tests.result == 'success' && '‚úÖ' || '‚ùå' }} |
          
          ### Coverage Reports
          - [Frontend Coverage](https://codecov.io/gh/${{ github.repository }}/branch/${{ github.head_ref }}/flag/frontend)
          - [Backend Coverage](https://codecov.io/gh/${{ github.repository }}/branch/${{ github.head_ref }}/flag/backend)
          
          **Quality Gate:** ${{ needs.frontend-tests.result == 'success' && needs.backend-tests.result == 'success' && needs.e2e-tests.result == 'success' && '‚úÖ PASSED' || '‚ùå FAILED' }}
          `;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: message
          });