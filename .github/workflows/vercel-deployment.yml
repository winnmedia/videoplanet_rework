name: Vercel Production Deployment

on:
  push:
    branches: [master, main]
    paths:
      - 'vridge-web/**'
  pull_request:
    branches: [master, main]
    paths:
      - 'vridge-web/**'

env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

defaults:
  run:
    working-directory: vridge-web

jobs:
  # 환경변수 검증 게이트
  validate-env:
    name: Validate Environment Variables
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 9.15.0

      - name: Setup Node.js 18
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'pnpm'
          cache-dependency-path: vridge-web/pnpm-lock.yaml

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Validate Environment Schema
        run: |
          # 환경변수 검증 스크립트 실행
          node -e "
            const { validateFrontendEnv } = require('./dist/shared/lib/env-validation.js');
            try {
              validateFrontendEnv();
              console.log('✅ 환경변수 검증 통과');
            } catch (error) {
              console.error('❌ 환경변수 검증 실패:', error.message);
              process.exit(1);
            }
          "

  # 품질 게이트 (Build & Test)
  quality-gates:
    name: Quality Gates (Build & Test)
    runs-on: ubuntu-latest
    needs: validate-env
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 9.15.0

      - name: Setup Node.js 18
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'pnpm'
          cache-dependency-path: vridge-web/pnpm-lock.yaml

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Type Check
        run: pnpm run type-check

      - name: Lint Check
        run: pnpm run lint

      - name: Format Check
        run: pnpm run format:check

      - name: Run Tests
        run: pnpm run test:ci

      - name: Build Application
        run: pnpm run build
        env:
          NEXT_PUBLIC_APP_NAME: "Video Planet, VLANET"
          NEXT_PUBLIC_APP: "VideoPlanet"
          NEXT_PUBLIC_APP_ENV: "production"
          NEXT_PUBLIC_PRODUCTION_DOMAIN: "vlanet.net"
          NEXT_PUBLIC_APP_URL: "https://vlanet.net"
          NEXT_PUBLIC_API_BASE: "https://api.vlanet.net"
          NEXT_PUBLIC_BACKEND_API: "https://videoplanet.up.railway.app"
          NEXT_PUBLIC_WS_URL: "wss://videoplanet.up.railway.app"
          NEXT_PUBLIC_WS_RECONNECT_INTERVAL: "5000"
          NEXT_PUBLIC_WS_HEARTBEAT_INTERVAL: "30000"
          NEXT_PUBLIC_WS_MAX_RECONNECT_ATTEMPTS: "10"
          NEXT_PUBLIC_WS_MESSAGE_QUEUE_SIZE: "1000"

      - name: Upload Coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          directory: ./vridge-web/coverage
          flags: frontend

  # 성능 예산 검증
  performance-budget:
    name: Performance Budget Check
    runs-on: ubuntu-latest
    needs: quality-gates
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 9.15.0

      - name: Setup Node.js 18
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'pnpm'
          cache-dependency-path: vridge-web/pnpm-lock.yaml

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build for Performance Analysis
        run: pnpm run build

      - name: Run Lighthouse CI
        run: pnpm run lighthouse:ci
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

  # Vercel 배포 (Production)
  deploy-production:
    name: Deploy to Vercel (Production)
    runs-on: ubuntu-latest
    needs: [quality-gates, performance-budget]
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://vlanet.net
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 9.15.0

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}

      - name: Build Project Artifacts
        run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}

      - name: Deploy Project Artifacts
        run: vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }}

  # Vercel 배포 (Preview)
  deploy-preview:
    name: Deploy to Vercel (Preview)
    runs-on: ubuntu-latest
    needs: quality-gates
    if: github.event_name == 'pull_request'
    environment:
      name: preview
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 9.15.0

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}

      - name: Build Project Artifacts
        run: vercel build --token=${{ secrets.VERCEL_TOKEN }}

      - name: Deploy Project Artifacts
        run: |
          url=$(vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }})
          echo "PREVIEW_URL=$url" >> $GITHUB_ENV
          echo "Preview deployed to: $url"

      - name: Comment PR
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `🚀 **Preview deployment ready!**
              
              📱 Preview URL: ${{ env.PREVIEW_URL }}
              
              ✅ All quality gates passed:
              - Type checking
              - Linting & formatting  
              - Unit & component tests
              - Performance budget validation
              
              🔍 Please review and test the changes.`
            })

  # 배포 후 검증
  post-deploy-verification:
    name: Post-Deployment Verification
    runs-on: ubuntu-latest
    needs: deploy-production
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main'
    steps:
      - name: Health Check
        run: |
          echo "🔍 Production health check..."
          response=$(curl -s -o /dev/null -w "%{http_code}" https://vlanet.net/api/health)
          if [ "$response" = "200" ]; then
            echo "✅ Health check passed"
          else
            echo "❌ Health check failed (HTTP $response)"
            exit 1
          fi

      - name: Performance Check
        run: |
          echo "⚡ Performance validation..."
          # Lighthouse CLI를 사용한 실제 배포 성능 검증
          npx lighthouse https://vlanet.net --chrome-flags="--headless" --output=json --output-path=lighthouse-result.json
          
          # 성능 점수 확인 (90점 이상 요구)
          score=$(cat lighthouse-result.json | jq '.categories.performance.score * 100')
          echo "Performance score: $score"
          
          if (( $(echo "$score < 90" | bc -l) )); then
            echo "❌ Performance score below threshold ($score < 90)"
            exit 1
          fi
          echo "✅ Performance check passed"

      - name: Notify Success
        if: success()
        run: |
          echo "🎉 Deployment successful!"
          echo "✅ Health checks passed"
          echo "⚡ Performance within budget"
          echo "🚀 Application is live at https://vlanet.net"