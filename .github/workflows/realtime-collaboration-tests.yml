name: Realtime Collaboration Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # 매일 새벽 2시에 전체 테스트 실행
    - cron: '0 2 * * *'

env:
  NODE_ENV: test
  NEXT_PUBLIC_API_URL: http://localhost:3001
  NEXT_PUBLIC_WS_URL: ws://localhost:3001/ws
  NEXT_PUBLIC_WS_RECONNECT_INTERVAL: 1000

jobs:
  realtime-unit-tests:
    name: 실시간 협업 단위 테스트
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install pnpm
        run: npm install -g pnpm

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run WebSocket unit tests
        run: pnpm test src/shared/lib/websocket/

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: websocket-unit-test-results
          path: coverage/

  realtime-e2e-tests:
    name: 실시간 협업 E2E 테스트  
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        # 다양한 브라우저에서 테스트
        browser: [chrome, firefox, edge]
        # 다양한 네트워크 조건에서 테스트
        network: [fast3g, slow3g, offline]
      fail-fast: false

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install pnpm
        run: npm install -g pnpm

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build application
        run: pnpm build

      - name: Setup WebSocket test server
        run: |
          npm install -g ws
          node -e "
            const WebSocket = require('ws');
            const server = new WebSocket.Server({ port: 3001 });
            console.log('WebSocket test server started on port 3001');
            server.on('connection', (ws) => {
              ws.on('message', (data) => {
                server.clients.forEach((client) => {
                  if (client !== ws && client.readyState === WebSocket.OPEN) {
                    client.send(data);
                  }
                });
              });
            });
          " &

      - name: Start application
        run: pnpm start &
        env:
          NODE_ENV: test

      - name: Wait for services
        run: |
          npx wait-on http://localhost:3000
          npx wait-on ws://localhost:3001

      - name: Run Cypress E2E tests
        uses: cypress-io/github-action@v6
        with:
          browser: ${{ matrix.browser }}
          spec: cypress/e2e/realtime-collaboration.cy.ts
          wait-on: 'http://localhost:3000'
          wait-on-timeout: 120
        env:
          CYPRESS_NETWORK_CONDITION: ${{ matrix.network }}

      - name: Run performance tests
        if: matrix.browser == 'chrome' && matrix.network == 'fast3g'
        uses: cypress-io/github-action@v6
        with:
          browser: chrome
          spec: cypress/e2e/realtime-performance.cy.ts
          wait-on: 'http://localhost:3000'

      - name: Upload Cypress screenshots
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: cypress-screenshots-${{ matrix.browser }}-${{ matrix.network }}
          path: cypress/screenshots/

      - name: Upload Cypress videos
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: cypress-videos-${{ matrix.browser }}-${{ matrix.network }}
          path: cypress/videos/

  websocket-load-tests:
    name: WebSocket 부하 테스트
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || contains(github.event.head_commit.message, '[load-test]')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install pnpm
        run: npm install -g pnpm

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Install Artillery (부하 테스트 도구)
        run: npm install -g artillery

      - name: Setup test WebSocket server
        run: |
          node cypress/support/tasks/websocket-server.js &
          sleep 5

      - name: Run WebSocket load tests
        run: |
          cat > websocket-load-test.yml << EOF
          config:
            target: 'ws://localhost:3001'
            phases:
              - duration: 60
                arrivalRate: 10
              - duration: 120  
                arrivalRate: 50
              - duration: 60
                arrivalRate: 100
            ws:
              timeout: 5000
          scenarios:
            - name: "Realtime Collaboration Load Test"
              weight: 100
              engine: ws
              beforeRequest: "setRandomUser"
              flow:
                - connect:
                    url: "ws://localhost:3001"
                - send:
                    message: '{"type": "user_joined", "userId": "{{ userId }}", "projectId": "load-test"}'
                - think: 1
                - loop:
                  - send:
                      message: '{"type": "comment_added", "content": "Load test comment {{ \$randomInt(1, 1000) }}", "userId": "{{ userId }}"}'
                  - think: 2
                  - send: 
                      message: '{"type": "cursor_moved", "userId": "{{ userId }}", "position": {"x": {{ \$randomInt(0, 1920) }}, "y": {{ \$randomInt(0, 1080) }}}}'
                  - think: 1
                  count: 10
          EOF

          artillery run websocket-load-test.yml --output load-test-results.json

      - name: Generate load test report
        run: artillery report load-test-results.json --output load-test-report.html

      - name: Upload load test results
        uses: actions/upload-artifact@v4
        with:
          name: websocket-load-test-results
          path: |
            load-test-results.json
            load-test-report.html

  security-tests:
    name: WebSocket 보안 테스트
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install pnpm
        run: npm install -g pnpm

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Install security testing tools
        run: |
          npm install -g eslint-plugin-security
          npm install -g semgrep

      - name: Run security linting
        run: |
          npx eslint src/shared/lib/websocket/ --ext .ts --config .eslintrc.security.js || true

      - name: Run Semgrep security analysis
        run: |
          cat > .semgrep.yml << EOF
          rules:
            - id: websocket-security-check
              pattern: |
                new WebSocket(\$URL)
              message: "WebSocket connection should validate URL and use secure protocols"
              languages: [typescript, javascript]
              severity: WARNING
          EOF
          semgrep --config=.semgrep.yml src/shared/lib/websocket/ || true

      - name: Test WebSocket security headers
        run: |
          node -e "
            const WebSocket = require('ws');
            const server = new WebSocket.Server({ 
              port: 3002,
              verifyClient: (info) => {
                // Origin 검증 테스트
                const origin = info.origin;
                const allowedOrigins = ['http://localhost:3000'];
                return allowedOrigins.includes(origin);
              }
            });
            
            setTimeout(() => {
              console.log('Security test server ready');
              process.exit(0);
            }, 1000);
          "

  compatibility-tests:
    name: 브라우저 호환성 테스트
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        browser: [chrome, firefox, safari, edge]
        include:
          - browser: safari
            os: macos-latest
      fail-fast: false

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install pnpm
        run: npm install -g pnpm

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build application
        run: pnpm build

      - name: Start application
        run: pnpm start &

      - name: Run browser compatibility tests
        uses: cypress-io/github-action@v6
        with:
          browser: ${{ matrix.browser }}
          spec: cypress/e2e/cross-browser-compatibility.cy.ts
          wait-on: 'http://localhost:3000'

  performance-monitoring:
    name: 성능 모니터링
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install pnpm
        run: npm install -g pnpm

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build application
        run: pnpm build

      - name: Start application
        run: pnpm start &

      - name: Wait for application
        run: npx wait-on http://localhost:3000

      - name: Run Lighthouse CI for WebSocket performance
        run: |
          npm install -g @lhci/cli
          lhci autorun --config=.lighthouserc.js
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

      - name: Monitor WebSocket performance metrics
        run: |
          node -e "
            const puppeteer = require('puppeteer');
            (async () => {
              const browser = await puppeteer.launch();
              const page = await browser.newPage();
              
              // Performance 측정 시작
              await page.goto('http://localhost:3000/feedback/test-project');
              
              // WebSocket 연결 대기
              await page.waitForSelector('[data-testid=\"connection-status\"]');
              
              // 성능 메트릭 수집
              const metrics = await page.metrics();
              console.log('Performance Metrics:', metrics);
              
              // WebSocket 메시지 전달 시간 측정
              const messageLatency = await page.evaluate(() => {
                return new Promise((resolve) => {
                  const startTime = performance.now();
                  // WebSocket 메시지 전송 시뮬레이션
                  setTimeout(() => {
                    const endTime = performance.now();
                    resolve(endTime - startTime);
                  }, 100);
                });
              });
              
              console.log('WebSocket Message Latency:', messageLatency, 'ms');
              
              if (messageLatency > 500) {
                console.error('WebSocket performance degradation detected!');
                process.exit(1);
              }
              
              await browser.close();
            })();
          "

  notification:
    name: 테스트 결과 알림
    runs-on: ubuntu-latest
    needs: [realtime-unit-tests, realtime-e2e-tests, websocket-load-tests, security-tests, compatibility-tests, performance-monitoring]
    if: always()
    
    steps:
      - name: Send Slack notification
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#dev-alerts'
          text: |
            🚨 실시간 협업 테스트 실패!
            
            Repository: ${{ github.repository }}
            Branch: ${{ github.ref }}
            Commit: ${{ github.sha }}
            
            실패한 작업:
            ${{ needs.realtime-unit-tests.result == 'failure' && '- 단위 테스트' || '' }}
            ${{ needs.realtime-e2e-tests.result == 'failure' && '- E2E 테스트' || '' }}
            ${{ needs.websocket-load-tests.result == 'failure' && '- 부하 테스트' || '' }}
            ${{ needs.security-tests.result == 'failure' && '- 보안 테스트' || '' }}
            ${{ needs.compatibility-tests.result == 'failure' && '- 호환성 테스트' || '' }}
            ${{ needs.performance-monitoring.result == 'failure' && '- 성능 모니터링' || '' }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Send success notification
        if: success()
        uses: 8398a7/action-slack@v3
        with:
          status: success
          channel: '#dev-alerts'
          text: |
            ✅ 실시간 협업 테스트 성공!
            
            모든 품질 게이트를 통과했습니다.
            - WebSocket 연결: < 2초
            - 메시지 전달: < 500ms  
            - 동시 사용자: 100명 지원
            - 메모리 사용량: < 50MB
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}