name: CI/CD Quality Gates

on:
  push:
    branches: [main, master, develop, railway-deploy]
  pull_request:
    branches: [main, master, develop]

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '8'

jobs:
  setup:
    name: Setup & Cache
    runs-on: ubuntu-latest
    outputs:
      cache-key: ${{ steps.cache-key.outputs.key }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Generate cache key
        id: cache-key
        run: |
          echo "key=pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ steps.cache-key.outputs.key }}
          restore-keys: |
            pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Cache node_modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: node_modules-${{ hashFiles('**/pnpm-lock.yaml') }}

  # 1단계: 기본 품질 게이트
  code-quality:
    name: Code Quality Gates
    runs-on: ubuntu-latest
    needs: setup
    strategy:
      matrix:
        check: [typecheck, lint, format-check]
      fail-fast: false
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Restore node_modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: node_modules-${{ hashFiles('**/pnpm-lock.yaml') }}
          fail-on-cache-miss: true

      - name: Type Check
        if: matrix.check == 'typecheck'
        run: |
          echo "::group::TypeScript Compilation Check"
          pnpm type-check
          echo "::endgroup::"

      - name: ESLint Check
        if: matrix.check == 'lint'
        run: |
          echo "::group::ESLint FSD Boundary Check"
          pnpm lint --format=@eslint/eslint-formatter-unix
          echo "::endgroup::"

      - name: Format Check
        if: matrix.check == 'format-check'
        run: |
          echo "::group::Prettier Format Check"
          npx prettier --check "**/*.{ts,tsx,js,jsx,json,md}"
          echo "::endgroup::"

  # 2단계: 스타일링 충돌 검증
  styling-validation:
    name: Styling Conflict Prevention
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Restore node_modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: node_modules-${{ hashFiles('**/pnpm-lock.yaml') }}
          fail-on-cache-miss: true

      - name: Check for Tailwind Arbitrary Values
        run: |
          echo "::group::Tailwind Arbitrary Values Check"
          if grep -r "\[.*\]" --include="*.tsx" --include="*.ts" --exclude-dir=node_modules --exclude-dir=.next . | grep -E "w-\[|h-\[|p-\[|m-\[|text-\[|bg-\["; then
            echo "❌ Tailwind arbitrary values detected! Use design tokens instead."
            exit 1
          else
            echo "✅ No arbitrary values found"
          fi
          echo "::endgroup::"

      - name: Check for Styled Components Usage
        run: |
          echo "::group::Styled Components Usage Check"
          if grep -r "styled\." --include="*.tsx" --include="*.ts" --exclude-dir=node_modules --exclude-dir=.next .; then
            echo "❌ Styled Components usage detected! Use Tailwind CSS instead."
            exit 1
          else
            echo "✅ No Styled Components usage found"
          fi
          echo "::endgroup::"

      - name: Check for New SCSS File Creation
        run: |
          echo "::group::New SCSS File Creation Check"
          # Check if any new .scss files were added in this PR
          if git diff --name-only ${{ github.event.before }} HEAD | grep "\.scss$"; then
            echo "❌ New SCSS files detected! Use Tailwind CSS for new components."
            echo "Found new SCSS files:"
            git diff --name-only ${{ github.event.before }} HEAD | grep "\.scss$"
            exit 1
          else
            echo "✅ No new SCSS files created"
          fi
          echo "::endgroup::"

      - name: Validate Tailwind Class Ordering
        run: |
          echo "::group::Tailwind Class Ordering Validation"
          # Check if prettier-plugin-tailwindcss is working correctly
          npx prettier --check "**/*.{ts,tsx}" --plugin=@tailwindcss/prettier-plugin || {
            echo "❌ Tailwind classes are not properly sorted!"
            echo "Run: pnpm prettier --write . to fix"
            exit 1
          }
          echo "✅ Tailwind classes are properly ordered"
          echo "::endgroup::"

  # 3단계: 테스트 실행
  tests:
    name: Test Suite
    runs-on: ubuntu-latest
    needs: setup
    strategy:
      matrix:
        test-type: [unit, integration, contracts]
      fail-fast: false
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Restore node_modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: node_modules-${{ hashFiles('**/pnpm-lock.yaml') }}
          fail-on-cache-miss: true

      - name: Run Unit Tests
        if: matrix.test-type == 'unit'
        run: |
          echo "::group::Unit Tests (Entities, Features, Shared)"
          pnpm test:unit --run --coverage --coverage.thresholds.lines=70
          echo "::endgroup::"

      - name: Run Integration Tests
        if: matrix.test-type == 'integration'
        run: |
          echo "::group::Integration Tests (Widgets, Processes, App)"
          pnpm test:integration --run
          echo "::endgroup::"

      - name: Run Contract Tests
        if: matrix.test-type == 'contracts'
        run: |
          echo "::group::API Contract Tests"
          pnpm test:contracts --run
          echo "::endgroup::"

      - name: Upload Coverage Reports
        if: matrix.test-type == 'unit'
        uses: actions/upload-artifact@v3
        with:
          name: coverage-reports
          path: coverage/
          retention-days: 7

  # 4단계: 빌드 검증
  build-validation:
    name: Build Validation
    runs-on: ubuntu-latest
    needs: [code-quality, styling-validation]
    strategy:
      matrix:
        build-type: [development, production]
      fail-fast: false
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Restore node_modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: node_modules-${{ hashFiles('**/pnpm-lock.yaml') }}
          fail-on-cache-miss: true

      - name: Build Development
        if: matrix.build-type == 'development'
        run: |
          echo "::group::Development Build"
          NODE_ENV=development pnpm build
          echo "::endgroup::"

      - name: Build Production
        if: matrix.build-type == 'production'
        run: |
          echo "::group::Production Build"
          NODE_ENV=production pnpm build
          echo "::endgroup::"

      - name: Validate Build Artifacts
        run: |
          echo "::group::Build Artifacts Validation"
          if [ ! -d ".next" ]; then
            echo "❌ .next directory not found!"
            exit 1
          fi
          
          if [ ! -f ".next/package.json" ]; then
            echo "❌ .next/package.json not found!"
            exit 1
          fi
          
          echo "✅ Build artifacts validated"
          echo "::endgroup::"

  # 5단계: 환경 변수 검증
  env-validation:
    name: Environment Variables Validation
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Restore node_modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: node_modules-${{ hashFiles('**/pnpm-lock.yaml') }}
          fail-on-cache-miss: true

      - name: Validate Environment Schema
        run: |
          echo "::group::Environment Variables Schema Validation"
          # Mock environment for validation
          cat > .env.test << EOF
          NODE_ENV=test
          NEXT_PUBLIC_API_URL=http://localhost:3000
          DATABASE_URL=postgresql://test:test@localhost:5432/test
          EOF
          
          # Run environment validation script
          if [ -f "lib/config/env.ts" ]; then
            echo "Running environment validation..."
            npx tsx lib/config/env.ts
          else
            echo "⚠️  Environment validation script not found"
          fi
          echo "::endgroup::"

  # 6단계: E2E 스모크 테스트
  e2e-smoke:
    name: E2E Smoke Tests
    runs-on: ubuntu-latest
    needs: [build-validation]
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Install Playwright
        run: pnpm dlx playwright install --with-deps chromium

      - name: Run E2E Smoke Tests
        run: |
          echo "::group::Critical Path E2E Tests"
          pnpm test:e2e:smoke
          echo "::endgroup::"

      - name: Upload E2E Results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: e2e-results
          path: |
            test-results/
            playwright-report/
          retention-days: 7

  # 7단계: 성능 예산 검증 (프로덕션 빌드에서만)
  performance-budget:
    name: Performance Budget Validation
    runs-on: ubuntu-latest
    needs: [build-validation]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build for Performance Analysis
        run: pnpm build

      - name: Analyze Bundle Size
        run: |
          echo "::group::Bundle Size Analysis"
          if npx next build --profile; then
            echo "✅ Bundle size within limits"
          else
            echo "❌ Bundle size exceeds limits!"
            exit 1
          fi
          echo "::endgroup::"

  # 8단계: 보안 검사
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Run Security Audit
        run: |
          echo "::group::NPM Security Audit"
          pnpm audit --audit-level moderate
          echo "::endgroup::"

      - name: Check for sensitive data
        run: |
          echo "::group::Sensitive Data Check"
          if grep -r "password\|secret\|key\|token" --include="*.ts" --include="*.tsx" --exclude-dir=node_modules . | grep -v "//\|/\*"; then
            echo "⚠️  Potential sensitive data found in code"
            echo "Please review and ensure secrets are properly handled"
          else
            echo "✅ No hardcoded sensitive data detected"
          fi
          echo "::endgroup::"

  # 최종 게이트: 모든 검증 완료 확인
  quality-gate-passed:
    name: All Quality Gates Passed
    runs-on: ubuntu-latest
    needs: [code-quality, styling-validation, tests, build-validation, env-validation, security-audit]
    if: always()
    steps:
      - name: Check Quality Gates
        run: |
          echo "::group::Quality Gate Status"
          
          # Check if all required jobs passed
          if [[ "${{ needs.code-quality.result }}" == "success" && \
                "${{ needs.styling-validation.result }}" == "success" && \
                "${{ needs.tests.result }}" == "success" && \
                "${{ needs.build-validation.result }}" == "success" && \
                "${{ needs.env-validation.result }}" == "success" && \
                "${{ needs.security-audit.result }}" == "success" ]]; then
            echo "✅ ALL QUALITY GATES PASSED"
            echo "🚀 Ready for merge/deployment"
          else
            echo "❌ QUALITY GATES FAILED"
            echo "Code Quality: ${{ needs.code-quality.result }}"
            echo "Styling Validation: ${{ needs.styling-validation.result }}"
            echo "Tests: ${{ needs.tests.result }}"
            echo "Build Validation: ${{ needs.build-validation.result }}"
            echo "Env Validation: ${{ needs.env-validation.result }}"
            echo "Security Audit: ${{ needs.security-audit.result }}"
            exit 1
          fi
          echo "::endgroup::"

      - name: Comment PR (if applicable)
        if: github.event_name == 'pull_request' && github.event.action != 'closed'
        uses: actions/github-script@v6
        with:
          script: |
            const status = '${{ needs.code-quality.result }}' === 'success' && 
                          '${{ needs.styling-validation.result }}' === 'success' && 
                          '${{ needs.tests.result }}' === 'success' && 
                          '${{ needs.build-validation.result }}' === 'success' && 
                          '${{ needs.env-validation.result }}' === 'success' && 
                          '${{ needs.security-audit.result }}' === 'success';
            
            const comment = status 
              ? '✅ **All Quality Gates Passed!** 🚀\n\nThis PR is ready for merge.'
              : '❌ **Quality Gates Failed**\n\nPlease fix the failing checks before merging.';
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });